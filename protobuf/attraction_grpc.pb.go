// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: protobuf/attraction.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AttractionServiceClient is the client API for AttractionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AttractionServiceClient interface {
	GetAttractions(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type attractionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAttractionServiceClient(cc grpc.ClientConnInterface) AttractionServiceClient {
	return &attractionServiceClient{cc}
}

func (c *attractionServiceClient) GetAttractions(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/protobuf.AttractionService/GetAttractions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttractionServiceServer is the server API for AttractionService service.
// All implementations must embed UnimplementedAttractionServiceServer
// for forward compatibility
type AttractionServiceServer interface {
	GetAttractions(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedAttractionServiceServer()
}

// UnimplementedAttractionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAttractionServiceServer struct {
}

func (UnimplementedAttractionServiceServer) GetAttractions(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttractions not implemented")
}
func (UnimplementedAttractionServiceServer) mustEmbedUnimplementedAttractionServiceServer() {}

// UnsafeAttractionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AttractionServiceServer will
// result in compilation errors.
type UnsafeAttractionServiceServer interface {
	mustEmbedUnimplementedAttractionServiceServer()
}

func RegisterAttractionServiceServer(s grpc.ServiceRegistrar, srv AttractionServiceServer) {
	s.RegisterService(&AttractionService_ServiceDesc, srv)
}

func _AttractionService_GetAttractions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttractionServiceServer).GetAttractions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.AttractionService/GetAttractions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttractionServiceServer).GetAttractions(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// AttractionService_ServiceDesc is the grpc.ServiceDesc for AttractionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AttractionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.AttractionService",
	HandlerType: (*AttractionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAttractions",
			Handler:    _AttractionService_GetAttractions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/attraction.proto",
}
